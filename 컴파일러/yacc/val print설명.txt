%union {
	int num;
	char *str;
}

보면
yylval.num 은 int형
yylval.str 은 포인터헝 char형
valprint2 가 제대로된 소스
valprint는 에러남 왜냐면 걍 yylavl이기 때문에
123abc 섞여들어오면 123은 정수로 인식하고 abc는 스트링으로 인식하는 프로그램

calculator.y 는 덧셈만 하는거고
calc1.y는 
%left	'+' '-'	/* left assoc. -- same priority */
%left	'*' '/'	/* left assoc. -- same priority */
연산자 우선순위를 정해줌
위에있으면 우선순위가 더 낮음
+-보다 */이 우선순위가 높다.
%left인경우 좌결합규칙
%right인경우 우결합규칙
 '-' expr %prec UNARYMINUS	{ $$ = -$2; }
expr '-' expr	{ $$ = $1 - $3; }
-가 두개나 있는이유는? UNARYMINUS -1 , -2 이런거
그럼 이게 젤 우선순위 높아야하는데 어떻게?  별도로 해줘야함
%prec UNARYMINUS<- 내맘대로 이름 정한거 (abc라해도 상관 x) %prec 우선순위규칙
%prec 이름 
얜 좌결합도아니고 우결합도아니라
%nonassoc	UNARYMINUS 써준거
즉 다시말해서 UNARYMINUS가 가장 우선순위 높고 */ 그다음 +- 순이다.
YACC에서 파싱방법
좌단유도 탑다운방식 // 우단역우도 바틈업방식 두가지방법이있는데
우단역우도 바틈업방식을 사용한다. (99.9퍼 이거사용) 파싱이 중요한(효율이중요할때)경우
야크에서도 역시 우단역우도 바틈업방식을 사용한다.
야크에선 컨텍스프리그래머 말고도 의미규칙을 적용할수있다 정의부에서
#define YYSTYPE double	/* data-type for yacc stack */
YYSTYPE을 double타입으로 했음
스택의 타입을 double 로 바꿔주는의미
calc2는
expr: NUMBER	{ $$ = $1; }
	| VAR			{ $$ = mem[$1]; }
	| VAR '=' expr	{ $$ = mem[$1] = $3; }
문자 하나인 변수를 사용 할 수 있게끔 했음
변수 = 수식으로 값을 assign 할 수 있음
또 다른점은 
%union {	/* stack type */
	double val;	/* value */
	int index;	/* index of mem[] */
}
%token	<val>	NUMBER	/* NUMBER --> element of 'val' of union */
%token	<index>	VAR
%type	<val>	expr

유니온부분도 살짝 달라졌지만 중요한건 그밑에 %tokon<val> 여기 보면
변수들 도입하면서 어떤 문제가 발생하느냐 값이 스택에 들어가는 내용이 실수인경우가있고
변수에대한 index인경우가 있음 0~25까지
| VAR '=' expr	{ $$ = mem[$1] = $3; }
VAR 정수타입
expr double타입
mem[1]에 추가하는역할?????????????????????
아무튼 carc2는 변수를 사용할수있게끔 확장한 그런내용