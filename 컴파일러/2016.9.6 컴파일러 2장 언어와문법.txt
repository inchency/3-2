G3 = ( T, N, P, S )
T = { 0 ,1 }
N = { S, X }
P = { S -> XS, S -> 0, S -> 1, X -> 0, X -> 1 }

생성규칙만 나열해두면 4가지 요소를 다 수집할 수있다.

논터미널 -> 문법기호

정규문법
   생성규칙에 대한 제약을 어떻게 할껀가

   논터미널 하나 혹은 없어야함

   우선형문법
      A -> tB
      터미널 중간에 논터미널 있으면 안됨 - 0S1 안됨, 00110S 가능
      터미널이 오른쪽 끝에있으면 우선형 문법

   좌선형문법
      화살표 왼쪽(LHS)에는 터미널이 오지 않는다(화살표의 오른쪽은 RHS)
      터미널이 왼쪽 끝에 있으면 좌선형 문법

   우선형 좌선형 기능이 같다 -> 변환 가능

   RHS는 터미널하고 논터미널 섞일수 있음

   S -> 0 : 1 : SX : 0S : S1

LHS - <-
RHS - ->

우선형 문법 위주로 할거임(이게 편함) 글을 좌에서 우로 쓰기 때문

정규 문법의 두가지 유형
1. S=>NULL(0)
2. S=>1
3. S=>NULL(0)S - 00, 01
4. S=>1S - 10, 01
5. S - 자기자신
6. X -> a
   X -> b

단일생성규칙(있을 필요가없음)
6번처럼 X 들릴 필요 없이 그냥 a, b 쓰면 됨
터미널 길이가 0인 우선형문법좌선형문법에서 nonterminal 하나만 있는것은 의미가 없음
단 엡실론(3 180도 회전한 것 처럼 생김)은 의미가 있음
null string
시작기호로부터 바로가는 엡실론은 필요함 왜냐하면 
L(G1) = {엡실론, 0,1,00,01, 10, 11}   ------ 갯수 차이가있음
엡실론을 안넣으면6개 넣으면7개
시작기호를 제외한 나머지 곳으로 엡실론을 넣는건 의미가없음(이상해짐 문제가 발생할 수 있지만 이걸
허용할 수밖에 없음 편의상)  
시작기호에만 필요함
어떤 언어 정규문법으로 기술하려함(매우 쉬워짐 자동으로 짤정도) context free로 하면 짤순 있지만 많이
복잡하다.
엡실론 생성규칙을 써야 편함.그래서편의상 허용을 해주긴 함

정규 문법의 정의를 단순화
우선형문법 A -> tsB : ts
좌선형문법 A -> Bts : ts
A-> 00101B(5개) 앞으로는 길이가 2인거만 정의
여기서 ts를 1개로 고정 그래도 우선형 문법임
터미널 길이가 nB (n개)는 터미널 1개짜리로 변환 가능
앞으로는 터미널을 2개이상으로 안하고 하나짜리로만 할거임 이래도 문제 없음